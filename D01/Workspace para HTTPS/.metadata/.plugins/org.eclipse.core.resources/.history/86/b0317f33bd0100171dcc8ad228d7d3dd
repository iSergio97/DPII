/*
 * PopulateDatabase.java
 * 
 * Copyright (C) 2017 Universidad de Sevilla
 * 
 * The use of this project is hereby constrained to the conditions of the
 * TDG Licence, a copy of which you may download from
 * http://www.tdg-seville.info/License.html
 */

package utilities;

import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import javax.persistence.Entity;

import org.apache.log4j.Level;
import org.apache.log4j.LogManager;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

import utilities.internal.DatabaseUtil;
import domain.DomainEntity;

public class PopulateDatabase {

	public static void main(final String[] args) {
		DatabaseUtil databaseUtil;
		ApplicationContext populationContext;
		Map<String, Object> entityMap;
		List<Entry<String, Object>> sortedEntities;

		LogManager.getLogger("org.hibernate").setLevel(Level.OFF);
		databaseUtil = null;

		try {
			System.out.printf("PopulateDatabase 1.9%n");
			System.out.printf("--------------------%n%n");

			System.out.printf("Initialising persistence context `%s'%n", DatabaseConfig.PersistenceUnit);
			databaseUtil = new DatabaseUtil();
			databaseUtil.open();

			System.out.printf("Creating database `%s' (%s)%n", databaseUtil.getDatabaseName(), databaseUtil.getDatabaseDialectName());
			databaseUtil.recreateDatabase();

			System.out.printf("Reading web of entities from `PopulateDatabase.xml'");
			populationContext = new ClassPathXmlApplicationContext("classpath:PopulateDatabase.xml");
			entityMap = populationContext.getBeansWithAnnotation(Entity.class);
			System.out.printf(" (%d entities found)%n", entityMap.size());

			System.out.printf("Trying to sort entities topologically%n");
			sortedEntities = PopulateDatabase.sort(databaseUtil, entityMap);

			System.out.printf("Trying to save the best ordering found%n");
			PopulateDatabase.persist(databaseUtil, sortedEntities);
		} catch (final Throwable oops) {
			System.err.println(oops.getClass().getName());
			System.err.println(oops.getMessage());
		} finally {
			System.out.printf("Closing persistence context%n");
			if (databaseUtil != null) {
				databaseUtil.close();
			}
		}
	}

	protected static List<Entry<String, Object>> sort(final DatabaseUtil databaseUtil, final Map<String, Object> entityMap) {
		LinkedList<Entry<String, Object>> result;
		LinkedList<Entry<String, Object>> sorted, tryout;
		int passCounter;
		boolean done;

		sorted = new LinkedList<Entry<String, Object>>();
		sorted.addAll(entityMap.entrySet());
		tryout = new LinkedList<Entry<String, Object>>();
		passCounter = 0;

		do {
			try {
				databaseUtil.openTransaction();
				PopulateDatabase.cleanEntities(sorted);

				while (!sorted.isEmpty()) {
					DomainEntity entity;
					Entry<String, Object> entry;

					entry = sorted.getFirst();
					entity = (DomainEntity) entry.getValue();
					databaseUtil.persist(entity);
					sorted.removeFirst();
					tryout.addLast(entry);
				}
				databaseUtil.undoTransaction();
				done = true;
				sorted.addAll(tryout);
				tryout.clear();
			} catch (final Throwable oops) {
				Entry<String, Object> entry;

				databaseUtil.undoTransaction();
				done = (passCounter < entityMap.size() - 1);

				entry = sorted.removeFirst();
				tryout.addAll(sorted);
				tryout.addLast(entry);
				sorted.clear();
				sorted.addAll(tryout);
				tryout.clear();
			}
			passCounter++;
		} while (!done);

		PopulateDatabase.cleanEntities(sorted);

		System.out.printf("%n");
		databaseUtil.openTransaction();
		for (final Entry<String, Object> entry : sorted) {
			String name;
			DomainEntity entity;

			name = entry.getKey();
			entity = (DomainEntity) entry.getValue();
			System.out.printf("> %s", name);
			databaseUtil.persist(entity);
			System.out.printf(": %s%n", entity.toString());
		}
		databaseUtil.closeTransaction();
		System.out.printf("%n");

		sorted = null;

		return sorted;
	}

	protected static void persist(final DatabaseUtil databaseUtil, final List<Entry<String, Object>> sortedEntities) {
		// TODO Auto-generated method stub

		System.err.printf("It's not possible to sort your web of entities so that it can be%n");
		System.err.printf("persisted.  Above, you can find the best partial topological order%n");
		System.err.printf("that was found.  The last entity that can be persisted will give you%n");
		System.err.printf("a hint regarding the association that cannot be persisted.  Please,%n");
		System.err.printf("analyse it and consider making it unidirectional.%n");
		System.err.printf("%n");

	}
	
	protected static void cleanEntities(final LinkedList<Entry<String, Object>> result) {
		for (final Entry<String, Object> entry : result) {
			DomainEntity entity;

			entity = (DomainEntity) entry.getValue();
			entity.setId(0);
			entity.setVersion(0);
		}
	}

}
