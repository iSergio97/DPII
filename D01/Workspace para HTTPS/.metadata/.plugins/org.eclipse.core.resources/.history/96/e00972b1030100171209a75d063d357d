/*
 * QueryDatabase.java
 * 
 * Copyright (C) 2017 Universidad de Sevilla
 * 
 * The use of this project is hereby constrained to the conditions of the
 * TDG Licence, a copy of which you may download from
 * http://www.tdg-seville.info/License.html
 */

package utilities;

import java.util.List;

import org.apache.commons.lang.StringUtils;

import utilities.internal.ConsolePrinter;
import utilities.internal.ConsoleReader;
import utilities.internal.DatabaseHelper;
import utilities.internal.LoggerHelper;

public class QueryDatabase {

	public static void main(final String[] args) throws Throwable {
		DatabaseHelper databaseUtil;
		ConsoleReader reader;
		String line;
		boolean quit;

		LoggerHelper.turnOff();
		databaseUtil = null;

		try {
			System.out.printf("QueryDatabase 1.9%n");
			System.out.printf("-----------------%n%n");

			System.out.printf("Initialising persistence context `%s'...%n", DatabaseConfig.PersistenceUnit);
			databaseUtil = new DatabaseHelper();

			reader = new ConsoleReader();

			do {
				line = reader.readCommand();
				quit = QueryDatabase.interpretLine(databaseUtil, line);
			} while (!quit);
		} catch (final Throwable oops) {
			System.err.println(oops.getClass().getName());
			System.err.println(oops.getMessage());
		} finally {
			databaseUtil.close();
		}
	}

	private static boolean interpretLine(final DatabaseHelper databaseUtil, final String line) {
		boolean result;
		String command;
		List<?> objects;
		int affected;

		try {
		command = StringUtils.substringBefore(line, " ");
		switch (command) {
		case "quit":
		case "exit":
			result = true;
			break;
		case "begin":
		case "open":
		case "start":
			databaseUtil.openTransaction();
			System.out.println("Transaction started");
			break;
		case "end":
		case "close":
		case "commit":
			databaseUtil.commitTransaction();
			System.out.println("Transaction committed");
			break;
		case "rollback":
			databaseUtil.rollbackTransaction();
			System.out.println("Transaction rollbacked");
			break;
		case "update":
		case "delete":
			affected = databaseUtil.executeUpdate(line);
			System.out.printf("%d objects %sd%n", affected, command);
			break;
		case "select":
			objects = databaseUtil.executeSelect(line);
			System.out.printf("%d object%s selected%n", objects.size(), (objects.size() == 1 ? "" : "s"));
			QueryDatabase.printResultList(objects);
			break;
		default:
			result = false;
			System.err.println("Command not understood");
		}
	} catch (final Throwable oops) {
		System.err.println(oops.getClass().getName());
		System.err.println(oops.getMessage());
	

		return result;
	}

	private static void printResultList(final List<?> objects) {
		String text;
		Object obj;

		for (int i = 0; i < objects.size(); i++) {
			obj = objects.get(i);
			text = ConsolePrinter.print(obj);
			//System.out.printf("Object #%d = %s %n", i, text);
			System.out.printf("%s%n", text);
		}
	}

}
